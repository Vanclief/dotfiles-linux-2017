# make tmux display things in 256 colors
set -g default-terminal "screen-256color"
set -g default-terminal "screen-256color"

# set scrollback history to 10000 (10k)
set -g history-limit 10000

# set Ctrl-a as the default prefix key combination
# and unbind C-b to free it up
set -g prefix C-s
unbind C-b

# use send-prefix to pass C-a through to application
bind C-a send-prefix

# shorten command delay
set -sg escape-time 1

# set window and pane index to 1 (0 by default)
set-option -g base-index 1
setw -g pane-base-index 1

# reload ~/.tmux.conf using PREFIX r
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# use PREFIX \ to split window horizontally and PREFIX - to split vertically
bind \ split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

bind c new-window -c "#{pane_current_path}"

# Make the current window the first window
bind T swap-window -t 1


is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?x?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# and use C-h and C-l to cycle thru panes
bind -r C-h select-window -t :-
bind -r C-l select-window -t :+

# resize panes using PREFIX H, J, K, L
#bind H resize-pane -L 5
#bind J resize-pane -D 5
#bind K resize-pane -U 5
#bind L resize-pane -R 5

# resize panes using Shift arrow keys
bind -n S-Left resize-pane -L 2
bind -n S-Right resize-pane -R 2
bind -n S-Down resize-pane -D 1
bind -n S-Up resize-pane -U 1

# move current pane to its own window
bind b break-pane -d

# bind-key t choose-tree

bind-key x kill-pane

# ---------------------
# Copy & Paste
# ---------------------
# provide access to the clipboard for pbpaste, pbcopy
#set-option -g default-command "reattach-to-user-namespace -l zsh"
#set-window-option -g automatic-rename on

# use vim keybindings in copy mode
setw -g mode-keys vi

# setup 'v' to begin selection as in Vim
# bind-key -t vi-copy v begin-selection
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
# bind -t vi-copy y copy-pipe 'xclip -in -selection clipboard'
# bind-key -t vi-copy y copy-pipe "xclip -sel clip -i"

# update default binding of 'Enter' to also use copy-pipe
#unbind -t vi-copy Enter
#bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

#bind y run 'tmux save-buffer - | reattach-to-user-namespace pbcopy '
#bind C-y run 'tmux save-buffer - | reattach-to-user-namespace pbcopy '

# ----------------------
# Status Bar
# -----------------------

# panes
set -g pane-border-fg black 
set -g pane-active-border-fg brightred

# status line design
set -g status-justify left
set -g status-bg colour0
set -g status-fg brightwhite
set -g status-interval 5
set -g status-position top

# status line information
set -g status-attr dim
set -g status-left ""
set -g status-right ' '

# messaging
set -g message-fg black
set -g message-bg yellow
set -g message-command-fg red
set -g message-command-bg black

# window mode
# setw -g mode-bg colour6
# setw -g mode-bg colour0

# window status

setw -g window-status-format "#F#I:#W#F"
setw -g window-status-attr reverse
setw -g window-status-bg colour7
setw -g window-status-fg colour0

setw -g window-status-current-format "#F#I:#W#F"
setw -g window-status-current-attr dim
setw -g window-status-current-bg colour0
setw -g window-status-current-fg colour1 

setw -g window-status-bell-attr dim
setw -g window-status-bell-bg colour0
setw -g window-status-bell-fg colour3 

setw -g window-status-last-attr dim
setw -g window-status-last-bg brightwhite
setw -g window-status-last-fg colour0 

# visual notification of activity in other windows
setw -g monitor-activity on
set -g visual-activity on


bind-key g split-window -v -p 50 -c "#{pane_current_path}" gitsh
bind-key h split-window -h htop
bind-key o split-window -h -c ~/ vim 'todo.md'

# break out a new session
bind-key C-b send-keys 'tat && exit' 'C-m'
bind-key K run-shell 'tmux switch-client -n \; kill-session -t "$(tmux display-message -p "#S")" || tmux kill-session'
